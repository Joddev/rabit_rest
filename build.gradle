buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.cyhee'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

def queryDslOutput = file("src/main/generated")

sourceSets {
    main {
        java {
            srcDir "src/main/generated"
        }
    }
}

clean {
    delete queryDslOutput
}

task generateQueryDSL(type: JavaCompile, group: 'build') {
    doFirst {
        if (!queryDslOutput.exists()) {
            logger.info("Creating `$queryDslOutput` directory")

            if (!queryDslOutput.mkdirs()) {
                throw new InvalidUserDataException("Unable to create `$queryDslOutput` directory")
            }
        }
    }

    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
			"-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"//,lombok.launch.AnnotationProcessorHider$AnnotationProcessor"
    ]
    destinationDir = queryDslOutput
}

compileTestJava.dependsOn(generateQueryDSL)

dependencies {
	compile('org.springframework.boot:spring-boot-starter-aop')
	//compile('org.springframework.boot:spring-boot-starter-cache')
	//compile("org.springframework.boot:spring-boot-starter-data-rest")
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.security.oauth:spring-security-oauth2:2.2.0.RELEASE')
	compile('org.springframework.security:spring-security-jwt:1.0.8.RELEASE')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-websocket')
	// postgresql
	compile('org.postgresql:postgresql:42.1.4')
	// gson
	compile('com.google.code.gson:gson:2.8.5')	
	// lombok
	compile('org.projectlombok:lombok:1.18.0')
	// swagger
	compile('io.springfox:springfox-swagger2:2.6.1')
	compile('io.springfox:springfox-swagger-ui:2.6.1')
	// querydsl
	compile('com.querydsl:querydsl-jpa:4.2.1')
	compile('com.querydsl:querydsl-apt:4.2.1')
	compile('com.querydsl:querydsl-core:4.2.1')	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	compile('org.apache.commons:commons-lang3:3.7')	
	//compile('org.springframework.session:spring-session-jdbc')	
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
	testCompile('com.h2database:h2')
}
